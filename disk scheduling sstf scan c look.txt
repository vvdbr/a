#include <stdio.h>
#include <stdlib.h>

#define MAX 1000

// Function to calculate absolute difference
int abs_diff(int a, int b) {
    return abs(a - b);
}

// Sort an array
void sort(int arr[], int n) {
    int temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// SSTF Disk Scheduling
void sstf(int request[], int n, int head) {
    int seek_time = 0;
    int done[MAX] = {0};  // Track if a request is completed
    int current = head;
    
    printf("\nSSTF Disk Scheduling:\n");
    printf("Head movement: %d", current);

    for (int i = 0; i < n; i++) {
        int min_seek = MAX;
        int min_index = -1;

        // Find the request with the shortest seek time
        for (int j = 0; j < n; j++) {
            if (!done[j]) {
                int diff = abs_diff(current, request[j]);
                if (diff < min_seek) {
                    min_seek = diff;
                    min_index = j;
                }
            }
        }

        // Process the request
        seek_time += min_seek;
        current = request[min_index];
        done[min_index] = 1;
        printf(" -> %d", current);
    }

    printf("\nTotal seek time: %d\n", seek_time);
}

// SCAN Disk Scheduling
void scan(int request[], int n, int head, int max_cylinder) {
    int seek_time = 0;
    int current = head;

    printf("\nSCAN Disk Scheduling:\n");
    printf("Head movement: %d", current);

    // Sort the requests
    sort(request, n);

    // Move in the current direction (away from the spindle)
    for (int i = 0; i < n; i++) {
        if (request[i] >= current) {
            for (int j = i; j < n; j++) {
                seek_time += abs_diff(current, request[j]);
                current = request[j];
                printf(" -> %d", current);
            }
            seek_time += abs_diff(current, max_cylinder);  // Move to the end of the disk
            printf(" -> %d", max_cylinder);
            current = max_cylinder;
            break;
        }
    }

    // Now reverse direction back to 0
    for (int i = n - 1; i >= 0; i--) {
        if (request[i] < head) {
            seek_time += abs_diff(current, request[i]);
            current = request[i];
            printf(" -> %d", current);
        }
    }

    printf("\nTotal seek time: %d\n", seek_time);
}

// C-LOOK Disk Scheduling
void c_look(int request[], int n, int head) {
    int seek_time = 0;
    int current = head;

    printf("\nC-LOOK Disk Scheduling:\n");
    printf("Head movement: %d", current);

    // Sort the requests
    sort(request, n);

    // Move in the current direction (away from the spindle)
    for (int i = 0; i < n; i++) {
        if (request[i] >= current) {
            for (int j = i; j < n; j++) {
                seek_time += abs_diff(current, request[j]);
                current = request[j];
                printf(" -> %d", current);
            }
            seek_time += abs_diff(current, request[0]); current = request[0]; printf(" -> %d", current); // Service the remaining requests for (int j = 0; j < i; j++) { seek_time += abs_diff(current, request[j]); current = request[j]; printf(" -> %d", current); } break;
        }
    }

    printf("\nTotal seek time: %d\n", seek_time);
}

int main() {
    int n, head, max_cylinder;
    printf("Enter the number of requests: ");
    scanf("%d", &n);

    int request[MAX];
    printf("Enter the disk requests:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &request[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("Enter the maximum cylinder number: ");
    scanf("%d", &max_cylinder);

    // Call the functions for each scheduling algorithm
    sstf(request, n, head);
    scan(request, n, head, max_cylinder);
    c_look(request, n, head);

    return 0;
}
