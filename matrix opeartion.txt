//matrix 

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define SIZE 3

// Matrices
int A[SIZE][SIZE] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
int B[SIZE][SIZE] = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
int result_add[SIZE][SIZE];
int result_sub[SIZE][SIZE];
int result_mul[SIZE][SIZE];

// Function to print matrix
void printMatrix(int mat[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", mat[i][j]);
        }
        printf("\n");
    }
}

// Matrix addition
void* matrix_add(void* arg) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            result_add[i][j] = A[i][j] + B[i][j];
        }
    }
    pthread_exit(0);
}

// Matrix subtraction
void* matrix_sub(void* arg) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            result_sub[i][j] = A[i][j] - B[i][j];
        }
    }
    pthread_exit(0);
}

// Matrix multiplication
void* matrix_mul(void* arg) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            result_mul[i][j] = 0;
            for (int k = 0; k < SIZE; k++) {
                result_mul[i][j] += A[i][k] * B[k][j];
            }
        }
    }
    pthread_exit(0);
}

int main() {
    pthread_t thread1, thread2, thread3;

    // Create threads for matrix operations
    pthread_create(&thread1, NULL, matrix_add, NULL);
    pthread_create(&thread2, NULL, matrix_sub, NULL);
    pthread_create(&thread3, NULL, matrix_mul, NULL);

    // Wait for all threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);
    pthread_join(thread3, NULL);

    // Print results
    printf("Matrix Addition:\n");
    printMatrix(result_add);

    printf("Matrix Subtraction:\n");
    printMatrix(result_sub);

    printf("Matrix Multiplication:\n");
    printMatrix(result_mul);

    return 0;
}