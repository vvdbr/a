import java.util.*;

class Process {
    int pid;        // Process ID
    int arrival;    // Arrival Time
    int burst;      // Burst Time
    int remaining;  // Remaining Time
    int completion; // Completion Time
    int turnaround; // Turnaround Time
    int waiting;    // Waiting Time

    Process(int pid, int arrival, int burst) {
        this.pid = pid;
        this.arrival = arrival;
        this.burst = burst;
        this.remaining = burst;
    }
}

public class SJFPreemptive {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();
        ArrayList<Process> processes = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            System.out.print("Enter arrival time for process " + (i+1) + ": ");
            int arrival = sc.nextInt();
            System.out.print("Enter burst time for process " + (i+1) + ": ");
            int burst = sc.nextInt();
            processes.add(new Process(i+1, arrival, burst));
        }

        processes.sort(Comparator.comparingInt(p -> p.arrival));

        int currentTime = 0;
        int completed = 0;
        int minRemainingTime = Integer.MAX_VALUE;
        Process currentProcess = null;
        int finishTime;
        boolean check = false;

        while (completed != n) {
            for (Process p : processes) {
                if (p.arrival <= currentTime && p.remaining > 0 && p.remaining < minRemainingTime) {
                    minRemainingTime = p.remaining;
                    currentProcess = p;
                    check = true;
                }
            }

            if (!check) {
                currentTime++;
                continue;
            }

            currentProcess.remaining--;
            minRemainingTime = currentProcess.remaining;
            if (minRemainingTime == 0) {
                minRemainingTime = Integer.MAX_VALUE;
            }

            if (currentProcess.remaining == 0) {
                completed++;
                check = false;
                finishTime = currentTime + 1;
                currentProcess.completion = finishTime;
                currentProcess.turnaround = finishTime - currentProcess.arrival;
                currentProcess.waiting = currentProcess.turnaround - currentProcess.burst;
            }
            currentTime++;
        }

        
        int totalTurnaroundTime = 0;
        int totalWaitingTime = 0;

        System.out.println("P\tAT\tBT\tCT\tTAT\tWT");
        for (Process p : processes) {
            System.out.println(p.pid + "\t" + p.arrival + "\t" + p.burst + "\t" + p.completion + "\t" + p.turnaround + "\t" + p.waiting);
            totalTurnaroundTime += p.turnaround;
            totalWaitingTime += p.waiting;
        }

        double avgTurnaroundTime = (double) totalTurnaroundTime / n;
        double avgWaitingTime = (double) totalWaitingTime / n;

        System.out.println("\nAverage Turnaround Time: " + avgTurnaroundTime);
        System.out.println("Average Waiting Time: " + avgWaitingTime);

        sc.close();
    }
}