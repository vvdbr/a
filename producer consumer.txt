// producer consumer
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5  // Size of the buffer

int buffer[BUFFER_SIZE];  // Shared buffer
int in = 0;               // Producer index
int out = 0;              // Consumer index

// Semaphores
sem_t empty;  // Tracks empty slots in the buffer
sem_t full;   // Tracks full slots in the buffer
pthread_mutex_t mutex;  // Ensures mutual exclusion

// Producer function
void* producer(void* arg) {
    int item;
    while (1) {
        item = rand() % 100;  // Produce an item

        // Wait if buffer is full (no empty slots)
        sem_wait(&empty);

        // Lock the mutex to ensure mutual exclusion
        pthread_mutex_lock(&mutex);

        // Add item to the buffer
        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;  // Circular buffer logic

        // Unlock the mutex
        pthread_mutex_unlock(&mutex);

        // Signal that a new item is available (buffer is not empty)
        sem_post(&full);

        sleep(1);  // Simulate time taken to produce an item
    }
}

// Consumer function
void* consumer(void* arg) {
    int item;
    while (1) {
        // Wait if buffer is empty (no items to consume)
        sem_wait(&full);

        // Lock the mutex to ensure mutual exclusion
        pthread_mutex_lock(&mutex);

        // Remove item from buffer
        item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;  // Circular buffer logic

        // Unlock the mutex
        pthread_mutex_unlock(&mutex);

        // Signal that a slot is now empty (buffer is not full)
        sem_post(&empty);

        sleep(1);  // Simulate time taken to consume an item
    }
}

int main() {
    pthread_t prod_thread, cons_thread;

    // Initialize semaphores
    sem_init(&empty, 0, BUFFER_SIZE);  // Buffer starts with all slots empty
    sem_init(&full, 0, 0);             // No items initially in the buffer
    pthread_mutex_init(&mutex, NULL);  // Initialize mutex

    // Create producer and consumer threads
    pthread_create(&prod_thread, NULL, producer, NULL);
    pthread_create(&cons_thread, NULL, consumer, NULL);

    // Wait for the threads to finish (which they won't in this infinite loop)
    pthread_join(prod_thread, NULL);
    pthread_join(cons_thread, NULL);

    // Cleanup
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}